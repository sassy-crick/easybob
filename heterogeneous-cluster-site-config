# This file contains all the site specific configurations,
# like for example the various paths, which partition to be used,
# the amount of requestable resources like cores, memory and time.
# Others may be added there as well.
# The idea is to use that file so all the configurations are the same,
# regardless whether they are in the Singularity Definition file or in
# the installation script. 

# Variables PBSpro concerning
# The 'PLATFORM' is the various platforms which are being build
# with the functions below the definition of them
PLATFORMS="icelake rome"
GPUPLATFORMS="icelake-gpu"

# We need to specify the queue:
QUEUE="cx"

# We are installing software as soon as they are merged, not only when a new release is out
# Thus, we need to pull the latest releases from GitHub. The problem here is if there are also 
# EasyBlocks which were changed. 
# We simply define the full path for the GitHub folder, containing the EasyConfig files. 
# This is of course site-specific and the full path is required:
GITHUBEC="/PATH/TO/git/easybuild-easyconfigs/"

# For a binary installation, like MATLAB etc, we are using the noarch folder
# To make that work, we are just having a list here of possible candidates
# This needs to be a list, as we later look over it and also check if that variable
# is set at all
NOARCH="MATLAB ANSYS STAR-CCM+ ABAQUS COMSOL Fiji Gaussian FreeSurfer VTune CellRanger Mathematica FSL"

# Some software, like pybind11, does not like long paths, so here we list them
# to make sure only the much shorter /dev/shm/$USER path is being used
SHORTLOG="pybind11"

# For ORCA, the test jobs are not working well within the container, so we simply
# disable them. Other software might be added here too
NOTESTS="ORCA"

# We define which softwarestack we are building. The default for prod is using
# the EasyBuild supplied flags. We can overwrite that for specific partitions of
# PBS further below using that syntax.
# EASYBUILD_OPTARCH=""
# We do NOT define a default!

function icelake {
PARTITION=":cpu_type=icelake"
CORES="16"
ARCH="icelake"
WALLTIME="72:00:0"
}

function rome {
PARTITION=":cpu_type=rome"
CORES="16"
ARCH="rome"
EASYBUILD_OPTARCH="Intel:-axAVX2 -mavx2"
WALLTIME="72:00:0"
}

function noarch {
PARTITION=""
CORES="4"
ARCH="noarch"
WALLTIME="4:00:0"
SOFTWARE_HOME="/rds/easybuild/noarch/apps/"
EASYBUILD_PREFIX="/rds/easybuild/noarch/apps/"
EASYBUILD_INSTALLPATH="/rds/easybuild/noarch/apps/"
EASYBUILD_TMPDIR="/dev/shm/$USER"
MODULEPATH="/rds/easybuild/noarch/apps/modules/all"
}

function dev {
PARTITION=""
CORES="16"
ARCH="icelake"
EASYBUILD_OPTARCH="Intel:-axAVX2 -mavx2;GCC:-march=haswell -mtune=generic"
SOFTWARE_HOME="/rds/easybuild/dev/apps/"
EASYBUILD_PREFIX="/rds/easybuild/dev/apps/"
EASYBUILD_INSTALLPATH="/rds/easybuild/dev/apps/"
MODULEPATH="/rds/easybuild/dev/apps/modules/all"
EB="eb --trace --robot --robot-paths=/PATH/TO/git/easybuild-easyconfigs/easybuild/easyconfigs/ --download-timeout=100 --hooks=/software/hooks/hooks-dev.py"
}

#### GPU SECTION ###
# We need to set the version of the nVidia GPUs we are using
# For the RTX6000 that is 7.5
# For the A100 that is 8.0
# See here for more details:
# https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/

function icelake-gpu {
PARTITION=":cpu_type=icelake:ngpus=2:gpu_type=A100"
CORES="12"
ARCH="icelake"
CUDA_COMPUTE_CAPABILITIES="8.0"
WALLTIME="72:00:0"
}

function rome-gpu {
PARTITION=":cpu_type=rome:ngpus=4:gpu_type=RTX6000"
CORES="24"
ARCH="zen2"
CUDA_COMPUTE_CAPABILITIES="7.5"
WALLTIME="72:00:0"
}

###

# What is it we want to use to install? Only EasyBuild or EESSI or both?
# Possible choices are EB, EESSI and BOTH 
# Right now, only the EB section is actually working
INSTALLING="EB"

# These bits are needed for the software installation using EasyBuild:

# Where to install the software. These are the paths OUTSIDE the container!
# Change as required
SOFTWARE_INSTDIR="/rds/easybuild"
SOFTWARE_HOME="${SOFTWARE_INSTDIR}/${ARCH}/apps"
# Which container name to be used:
CONTAINER_DIR="${SOFTWARE_INSTDIR}/containers"
CONTAINER_VERSION="eb-4.9.4-lmod-rocky8.9-cx.sif"
# For testing we are using a different container: 
CONTAINER_TESTING_VERSION="eb-4.9.4-lmod-alma8.9.sif"
# We might need to bind an additional external directory into the container:
BINDDIR="${SOFTWARE_INSTDIR}:/software"
# We need that so we got the PBS-Pro stuff inside the container
OPTDIR="/opt:/opt"
# The CUDA-installer wants to write to /var/log, so we do this
CUDALOGS="${TMPDIR}/cuda-logs"

# Variables EasyBuild concerning, i.e. used INSIDE the container:
# Some variables need to come from PBSpro above!
EASYBUILD_ACCEPT_EULA_FOR="Intel-oneAPI,NVHPC,NVIDIA-driver,CUDA,AOCC,cuDNN"
EASYBUILD_PREFIX="/sw-eb"
EASYBUILD_SOURCEPATH="/software/sources"
EASYBUILD_INSTALLPATH="/sw-eb"
EASYBUILD_BUILDPATH="/dev/shm/$USER"
# Choose between the logs being in /dev/shm or a log-path next to the directory for the EB script.
# The LOG_DIR will be defined in the install.sh script as we need the CPU architecture and the Job-ID for that
# We only need that for software in the SHORTLOG list. If the software is not in there, the LOG_DIR as defined 
# in the install.sh will be used.  
# EASYBUILD_TMPDIR="/dev/shm/$USER"
# EASYBUILD_TMPDIR="${LOG_DIR}"
# Where do we want to have the log-files? Default will be set here:
# LOG_DIR="\${WORKINGDIR}/\${ARCH}/\${PBS_JOBID}/logs"
EASYBUILD_PARALLEL="$CORES"
EB_VERSION="5.1.0"
MODULEPATH="/sw-eb/modules/all"
# Switch between using the GitHub repository, or the one from Easybuild. 
# This if for the default EasyConfig repository:
EB="eb --robot --download-timeout=100 --hooks=/software/hooks/site-hooks.py"
# This is if you want to use the GitHub one, which contains the merged EasyConfig files:
# EB="eb --robot --robot-paths=${GITHUBEC}/easybuild/easyconfigs --download-timeout=100 --hooks=/software/hooks/site-hooks.py"
# No nooks if we are testing!
# EB="eb --robot --download-timeout=100"
#
